[
    {
        "label": "dataclass;",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass;",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass;",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "ZoneInfo;",
        "importPath": "zoneinfo",
        "description": "zoneinfo",
        "isExtraImport": true,
        "detail": "zoneinfo",
        "documentation": {}
    },
    {
        "label": "ZoneInfo;",
        "importPath": "zoneinfo",
        "description": "zoneinfo",
        "isExtraImport": true,
        "detail": "zoneinfo",
        "documentation": {}
    },
    {
        "label": "datetime;",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime;",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime;",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Timing",
        "importPath": "air-of-fire.src.primitives.Timing",
        "description": "air-of-fire.src.primitives.Timing",
        "isExtraImport": true,
        "detail": "air-of-fire.src.primitives.Timing",
        "documentation": {}
    },
    {
        "label": "zoneinfo;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zoneinfo;",
        "description": "zoneinfo;",
        "detail": "zoneinfo;",
        "documentation": {}
    },
    {
        "label": "Storable;",
        "importPath": "Storable",
        "description": "Storable",
        "isExtraImport": true,
        "detail": "Storable",
        "documentation": {}
    },
    {
        "label": "Task;",
        "importPath": "primitives.Task",
        "description": "primitives.Task",
        "isExtraImport": true,
        "detail": "primitives.Task",
        "documentation": {}
    },
    {
        "label": "ObsidianTask;",
        "importPath": "primitives.Task",
        "description": "primitives.Task",
        "isExtraImport": true,
        "detail": "primitives.Task",
        "documentation": {}
    },
    {
        "label": "TaskManager;",
        "importPath": "TaskManager",
        "description": "TaskManager",
        "isExtraImport": true,
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "Enum;",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "listdir;",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "isfile",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join;",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "List;",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "json;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json;",
        "description": "json;",
        "detail": "json;",
        "documentation": {}
    },
    {
        "label": "os;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os;",
        "description": "os;",
        "detail": "os;",
        "documentation": {}
    },
    {
        "label": "shutil;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil;",
        "description": "shutil;",
        "detail": "shutil;",
        "documentation": {}
    },
    {
        "label": "logging;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging;",
        "description": "logging;",
        "detail": "logging;",
        "documentation": {}
    },
    {
        "label": "sys;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys;",
        "description": "sys;",
        "detail": "sys;",
        "documentation": {}
    },
    {
        "label": "traceback;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback;",
        "description": "traceback;",
        "detail": "traceback;",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Location",
        "description": "air-of-fire.src.primitives.Location",
        "peekOfCode": "class Location:\n    \"\"\"A `Location` is a dataclass for storing information about a geographical location.\n    It includes obligatory fields `latitude` and `longitude`, as well as an optional `timezone`.\n    @param latitude: The latitude of the `Location`.\n    @param longitude: The longitude of the `Location`.\n    @param timezone: The timezone of the `Location`, or `None` if not specified.\n    \"\"\"\n    latitude: float;\n    longitude: float;\n    timezone: ZoneInfo | None;",
        "detail": "air-of-fire.src.primitives.Location",
        "documentation": {}
    },
    {
        "label": "GeoLocation",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Location",
        "description": "air-of-fire.src.primitives.Location",
        "peekOfCode": "class GeoLocation(Location):    \n    \"\"\"A `GeoLocation` is a subclass of `Location` that includes additional fields for geolocation information.\n    @param latitude: The latitude of the `Location`.\n    @param longitude: The longitude of the `Location`.\n    @param timezone: The timezone of the `Location`, or `None` if not specified.\n    @param altitude: The altitude of the `Location`, or `None` if not specified.\n    @param accuracy: The accuracy of the `Location`, or `None` if not specified.\n    \"\"\"\n    def _checkParams(self, latitude, longitude, timezone, altitude=None, accuracy=None) -> None:\n        #   Checks latitude, longitude, and timezone",
        "detail": "air-of-fire.src.primitives.Location",
        "documentation": {}
    },
    {
        "label": "CityData",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Location",
        "description": "air-of-fire.src.primitives.Location",
        "peekOfCode": "class CityData:\n    city:       str;\n    region:     str;\n    country:    str;\n    location:   Location | None;\n    def __str__(self):\n        return f\"CityData[city={self.city}, region={self.region}, country={self.country}, location={self.location}]\";\n    def __repr__(self):\n        return self.__str__();\n    def to_dict(self):",
        "detail": "air-of-fire.src.primitives.Location",
        "documentation": {}
    },
    {
        "label": "TimingError",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Timing",
        "description": "air-of-fire.src.primitives.Timing",
        "peekOfCode": "class TimingError(Exception):\n    \"\"\"`TimingError` is a general error class for the `Timing` module.\n    @author nrosenthal\n    @version 1.0\n    @since 2024-10-28\n    \"\"\"\n    def __init__(self, message:str):\n        super().__init__(message);\n    def __str__(self):\n        return self.message;",
        "detail": "air-of-fire.src.primitives.Timing",
        "documentation": {}
    },
    {
        "label": "Timing",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Timing",
        "description": "air-of-fire.src.primitives.Timing",
        "peekOfCode": "class Timing:\n    \"\"\"`Timing` is the base class. It provides an interface for manipulating time intervals and durations.\n    @author nrosenthal\n    @version 1.0\n    @since 2024-10-28\n    \"\"\"\n    def _chk(self, start:datetime, end:datetime):\n        if(start > end):\n            raise ValueError(\"Start time must be before end time\");\n    def __init__(self, start:datetime, end:datetime):",
        "detail": "air-of-fire.src.primitives.Timing",
        "documentation": {}
    },
    {
        "label": "Duration",
        "kind": 6,
        "importPath": "air-of-fire.src.primitives.Timing",
        "description": "air-of-fire.src.primitives.Timing",
        "peekOfCode": "class Duration(Timing):\n    def __init__(self, start:datetime, end:datetime):\n        super().__init__(start, end);\n    def __str__(self):\n        return f\"{self.end - self.start}\";\n    def __repr__(self):\n        return self.__str__();\n    def __call__(self):\n        return super().__call__()[1] - super().__call__()[0];",
        "detail": "air-of-fire.src.primitives.Timing",
        "documentation": {}
    },
    {
        "label": "check_planetary_hour_duration",
        "kind": 2,
        "importPath": "air-of-fire.src.primitives.Timing",
        "description": "air-of-fire.src.primitives.Timing",
        "peekOfCode": "def check_planetary_hour_duration(start: datetime, end: datetime) -> bool:\n    \"\"\"Checks if the given `start` and `end` times are a valid planetary hour.\n    The start time must be before the end time and the duration must not exceed 2 hours.\n    Args:\n        start (datetime): The start time of the planetary hour.\n        end (datetime): The end time of the planetary hour.\n    Returns:\n        bool: `True` if the given `start` and `end` times are a valid planetary hour, `False` otherwise.\n    \"\"\"\n    try:",
        "detail": "air-of-fire.src.primitives.Timing",
        "documentation": {}
    },
    {
        "label": "initializeTestData",
        "kind": 2,
        "importPath": "air-of-fire.test.primitives.LocationTests",
        "description": "air-of-fire.test.primitives.LocationTests",
        "peekOfCode": "def initializeTestData():\n    global VALID_LATITUDES;\n    global VALID_LONGITUDES;\n    global VALID_TIMEZONES;\n    global INVALID_LATITUDES;\n    global INVALID_LONGITUDES;\n    global INVALID_TIMEZONES;\n    import random;\n    VALID_LATITUDES = [random.uniform(-90, 90) for i in range(10)];\n    VALID_LONGITUDES = [random.uniform(-180, 180) for i in range(10)];",
        "detail": "air-of-fire.test.primitives.LocationTests",
        "documentation": {}
    },
    {
        "label": "test_constructor",
        "kind": 2,
        "importPath": "air-of-fire.test.primitives.LocationTests",
        "description": "air-of-fire.test.primitives.LocationTests",
        "peekOfCode": "def test_constructor():\n    initializeTestData();\n    for i in range(len(VALID_LATITUDES)):\n        location = Location(VALID_LATITUDES[i], VALID_LONGITUDES[i], VALID_TIMEZONES[i]);\n        assert location.latitude == VALID_LATITUDES[i];\n        assert location.longitude == VALID_LONGITUDES[i];\n        assert location.timezone == VALID_TIMEZONES[i];\n    for i in range(len(INVALID_LATITUDES)):\n        location = Location(INVALID_LATITUDES[i], INVALID_LONGITUDES[i], INVALID_TIMEZONES[i]);\n        assert location.latitude == INVALID_LATITUDES[i];",
        "detail": "air-of-fire.test.primitives.LocationTests",
        "documentation": {}
    },
    {
        "label": "Activity",
        "kind": 6,
        "importPath": "primitives.Activity",
        "description": "primitives.Activity",
        "peekOfCode": "class Activity(Storable):\n    def __init__(self, name:str, description:str, timestamps:tuple):\n        \"\"\"\n        Creates a new Activity.\n        Args:\n            name (str): The name of the Activity.\n            description (str): A description of the Activity.\n            timestamps (tuple): A tuple of two strings representing the start and end times of the Activity in the format %Y-%m-%d %H:%M.\n        \"\"\"\n        self.name = name;",
        "detail": "primitives.Activity",
        "documentation": {}
    },
    {
        "label": "ActivityList",
        "kind": 6,
        "importPath": "primitives.Activity",
        "description": "primitives.Activity",
        "peekOfCode": "class ActivityList(Storable):\n    \"\"\"A list of Activity objects.\"\"\"\n    def __init__(self, activities:list):\n        \"\"\"\n        Creates a new ActivityList.\n        Args:\n            activities (list): A list of Activity objects.\n        \"\"\"\n        self.activities = activities;\n    def __str__(self):",
        "detail": "primitives.Activity",
        "documentation": {}
    },
    {
        "label": "Storable",
        "kind": 6,
        "importPath": "primitives.Storable",
        "description": "primitives.Storable",
        "peekOfCode": "class Storable:\n    \"\"\"The Storable interface provides abstract methods for storing objects\n    \"\"\"\n    def __init__(self, *args):\n        self._args = args;\n    def json(self) -> dict:\n        pass;\n    def xml(self) -> str:\n        pass;\n    def csv(self) -> str:",
        "detail": "primitives.Storable",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "primitives.Task",
        "description": "primitives.Task",
        "peekOfCode": "class Task:\n    name            :str;\n    description     :str;\n    priority        :int;\n    due_date        :datetime | None;\n    completed       :bool;\n    def __str__(self):\n        if(self.completed):\n            return f\" - [x] {self.name} - {self.description} - {self.priority} - {self.due_date}\";\n        else:",
        "detail": "primitives.Task",
        "documentation": {}
    },
    {
        "label": "ObsidianTask",
        "kind": 6,
        "importPath": "primitives.Task",
        "description": "primitives.Task",
        "peekOfCode": "class ObsidianTask(Task):\n    \"\"\"A ObsidianTask is a Task engineered to work with Obsidian.\"\"\"\n    tags: list[str];\n    PRIORITIES = {\n        1: r\"⏬️\",\n        2: r\"🔽\",\n        3: r\"🔼\",\n        4: r\"⏫\",\n        5: r\"🔺\"\n    };",
        "detail": "primitives.Task",
        "documentation": {}
    },
    {
        "label": "TaskManager",
        "kind": 6,
        "importPath": "TaskManager",
        "description": "TaskManager",
        "peekOfCode": "class TaskManager:\n    __slots__ = ['tasks'];\n    def __init__(self):\n        self.tasks = [];\n    def add_task(self, task:Task):\n        self.tasks.append(task);\n        self.tasks.sort(key=lambda x: x.priority);\n    def remove_task(self, task:Task):\n        self.tasks.remove(task);\n    def complete_task(self, task:Task):",
        "detail": "TaskManager",
        "documentation": {}
    },
    {
        "label": "TaskrStatus",
        "kind": 6,
        "importPath": "Taskr",
        "description": "Taskr",
        "peekOfCode": "class TaskrStatus(Enum):\n    \"\"\"TaskrStatus is a enum that represents the status of the Taskr class.\"\"\"\n    SUCCESS = 1;\n    FAILURE = 2;\n    WARNING = 3;\nclass Taskr:\n    DEFAULT_TASKR_DIRECTORY:str = \".taskr\";\n    DEFAULT_TASKR_TASKFILE:str = \"tasks.json\";\n    def __init__(self) -> None:\n        \"\"\"Creates a new Taskr object.\"\"\"",
        "detail": "Taskr",
        "documentation": {}
    },
    {
        "label": "Taskr",
        "kind": 6,
        "importPath": "Taskr",
        "description": "Taskr",
        "peekOfCode": "class Taskr:\n    DEFAULT_TASKR_DIRECTORY:str = \".taskr\";\n    DEFAULT_TASKR_TASKFILE:str = \"tasks.json\";\n    def __init__(self) -> None:\n        \"\"\"Creates a new Taskr object.\"\"\"\n        pass;\n    def __chkFiles(self) -> TaskrStatus:\n        \"\"\"Checks if the Taskr directory and Taskr task file exists.\n        Returns:\n            TaskrStatus:        SUCCESS if the directory and file exists, FAILURE otherwise.",
        "detail": "Taskr",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "Taskr",
        "description": "Taskr",
        "peekOfCode": "class App:\n    def __init__(self):\n        self.interface = Taskr();\n    def present(self):\n        print(\"Welcome to Taskr! Please choose an option:\");\n        print(\"1. Add Task\");\n        print(\"2. Remove Task\");\n        print(\"3. Complete Task\");\n        print(\"4. Uncomplete Task\");\n        print(\"5. Get All Tasks\");",
        "detail": "Taskr",
        "documentation": {}
    }
]